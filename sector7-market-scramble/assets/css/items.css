/* assets/css/items.css - Procedural item styles */

.game-item {
    position: absolute; /* Crucial for conveyor belt movement */
    /* Default appearance, will be overridden by specific types/profiles */
    border: 1px solid rgba(255, 255, 255, 0.3);
    box-shadow: 0 0 5px rgba(0,0,0,0.5);
    display: flex; /* For inner elements like segments or cores */
    align-items: center;
    justify-content: center;
    cursor: grab;
    transition: transform 0.1s ease-out, box-shadow 0.1s ease-out; /* For drag feedback */
}

.game-item:active, .game-item.dragging {
    cursor: grabbing;
    transform: scale(1.1);
    box-shadow: 0 0 15px var(--neon-yellow);
    z-index: 100; /* Bring to front when dragging */
}

/* --- Shape Examples --- */
.item-shape-rect-stacked {
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    padding: 2px;
    background-color: transparent !important; /* Override base if container only */
    border: none;
}
.item-shape-rect-stacked .item-segment {
    width: 90%;
    height: 25%;
    background-color: var(--neon-cyan); /* Default, should be set by item type */
    border: 1px solid rgba(0,0,0,0.2);
    border-radius: 2px;
    margin: auto;
}
.item-type-datachip .item-segment { background-color: var(--neon-cyan); } /* Example color */
.item-type-corrupted-data .item-segment { background-color: darkmagenta; filter: blur(0.5px); }


.item-shape-blob {
    /* animation: morph 8s ease-in-out infinite alternate; */ /* Can be too performance heavy */
    /* border-radius is set by JS for variety for now */
}
/* Add @keyframes morph if you use it */

/* --- Texture Examples --- */
.item-texture-scanlines {
    background-image: repeating-linear-gradient(
        0deg,
        transparent,
        transparent 2px,
        rgba(0, 0, 0, 0.3) 3px,
        rgba(0, 0, 0, 0.3) 4px
    );
    background-size: 100% 5px; /* Adjust scanline density */
}

.item-texture-pulsing .item-core {
    width: 40%;
    height: 40%;
    background-color: rgba(255, 255, 255, 0.7);
    border-radius: 50%;
    animation: pulse-core 1.5s infinite alternate;
    box-shadow: 0 0 10px white, 0 0 5px white inset;
}
.item-type-biomod .item-core { background-color: #ff6347; box-shadow: 0 0 10px #ff6347, 0 0 5px #ff8a50 inset; }


@keyframes pulse-core {
    from { transform: scale(0.8); opacity: 0.7; }
    to { transform: scale(1); opacity: 1; }
}


/* --- Specific Item Type Styling (can combine with shape/texture) --- */
.item-type-datachip {
    /* Uses item-shape-rect-stacked and item-texture-scanlines from above */
    /* Override specific segment colors if needed */
}

.item-type-biomod {
    /* background-color: var(--neon-magenta); */ /* Set by JS visualProfile */
    /* Uses item-shape-blob and item-texture-pulsing */
}
.item-type-biomod.item-shape-blob { /* ensure background color is applied to the main blob element */
    background-color: #ff0055; /* Example default for biomod blobs */
}


.item-type-hardware-common {
    background-color: #777;
    border: 2px outset #999;
}

.item-type-scrap {
    background-color: #5a3e2b; /* Rusty brown */
    border-radius: 3px 8px 2px 5px !important; /* Irregular */
    border: 1px solid #3b2a1d;
}
.item-type-scrap::before { /* Fake texture */
    content: '';
    position: absolute;
    inset: 3px;
    background: repeating-linear-gradient(45deg, transparent, transparent 5px, rgba(0,0,0,0.1) 5px, rgba(0,0,0,0.1) 7px);
}

.item-type-corrupted-data.item-shape-rect-stacked .item-segment {
    animation: glitch-flicker 0.1s infinite alternate;
}

@keyframes glitch-flicker {
    0% { opacity: 1; transform: translateX(0); }
    25% { opacity: 0.7; transform: translateX(-1px); }
    50% { opacity: 1; transform: translateX(1px); }
    75% { opacity: 0.8; transform: skewX(5deg); }
    100% { opacity: 1; transform: translateX(0); }
}