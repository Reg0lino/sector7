/* assets/css/items.css - Procedural item styles */

.game-item {
    position: absolute; /* Crucial for conveyor belt movement */
    /* Default appearance, will be overridden by specific types/profiles */
    border: 1px solid rgba(255, 255, 255, 0.1); /* Softer border */
    box-shadow: 0 1px 3px rgba(0,0,0,0.3);
    display: flex; /* For inner elements like segments or cores */
    align-items: center;
    justify-content: center;
    cursor: grab;
    transition: transform 0.1s ease-out, box-shadow 0.1s ease-out, outline 0.1s ease-out; /* For drag feedback */
    outline: 2px solid transparent;
    font-family: var(--font-secondary);
    color: white;
}

.game-item:active, .game-item.dragging {
    cursor: grabbing;
    transform: scale(1.15);
    box-shadow: 0 0 15px var(--neon-yellow), 0 0 5px var(--neon-yellow) inset;
    outline: 2px solid var(--neon-yellow);
    z-index: 100; /* Bring to front when dragging */
}

/* --- BASE ITEM TYPE STYLES (can be overridden by profile or specific classes) --- */
.item-type-datachip { background-color: var(--neon-cyan); }
.item-type-biomod { background-color: #ff3366; /* Vivid pink/red */ }
.item-type-hardware-common { background-color: #777; border: 1px solid #555; }
.item-type-scrap {
    background-color: #5a3e2b; /* Rusty brown */
    border-radius: 3px 8px 2px 5px !important; /* Irregular */
    border: 1px solid #3b2a1d;
}
.item-type-scrap::before { /* Fake texture */
    content: '';
    position: absolute;
    inset: 2px;
    background: repeating-linear-gradient(35deg, transparent, transparent 3px, rgba(0,0,0,0.08) 3px, rgba(0,0,0,0.08) 4px),
                repeating-linear-gradient(-35deg, transparent, transparent 2px, rgba(255,255,255,0.03) 2px, rgba(255,255,255,0.03) 3px);
    opacity: 0.7;
    border-radius: inherit;
}
.item-type-corrupted-data { background-color: darkmagenta; }
.item-type-corrupted-data .item-segment,
.item-type-corrupted-data.item-shape-composite-geometric {
    animation: glitch-flicker 0.15s infinite alternate;
}

/* --- SHAPE CLASSES --- */
.item-shape-rect-stacked {
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    padding: 3px;
    background-color: transparent !important; /* Override base if container only */
    border: none;
}
.item-shape-rect-stacked .item-segment {
    width: 85%;
    height: 22%;
    background-color: var(--neon-cyan); /* Default, should be set by item type */
    border: 1px solid rgba(0,0,0,0.3);
    border-radius: 2px;
    margin: auto;
    box-shadow: inset 0 0 2px rgba(0,0,0,0.2);
}
.item-type-datachip .item-segment { background-color: var(--neon-cyan); } /* Example color */
.item-type-corrupted-data .item-segment { background-color: darkmagenta; filter: blur(0.5px); }

.item-shape-blob {
    /* border-radius is set by JS for variety */
}
/* Add @keyframes morph if you use it */

.item-shape-amorphous-blob {
    /* border-radius set dynamically by JS */
    animation: subtle-morph 10s infinite alternate ease-in-out;
}
@keyframes subtle-morph {
    0% { border-radius: 45% 55% 60% 40% / 50% 45% 55% 50%; }
    100% { border-radius: 55% 45% 40% 60% / 45% 55% 45% 55%; }
}

.item-shape-composite-geometric {
    /* Base style for hardware, specific look via texture or JS-added elements */
     border-radius: 3px;
}
.item-shape-composite-geometric .inner-shape {
     /* Styles set by JS for now */
}

.item-shape-irregular-cluster { /* For Scrap */
    border-radius: 4px 10px 3px 7px / 7px 3px 10px 4px !important; /* Force irregular shape */
}

/* For corrupted items */
.item-distorted {
    animation: heavy-glitch-shape 0.3s infinite alternate steps(2, end);
}
@keyframes heavy-glitch-shape {
    0% { transform: translate(0, 0) skew(0); opacity: 1; }
    100% { transform: translate(1px, -1px) skew(2deg); opacity: 0.85; }
}

/* --- TEXTURE CLASSES --- */
.item-texture-scanlines {
    background-image: repeating-linear-gradient(
        0deg,
        transparent,
        transparent 2px,
        rgba(0, 0, 0, 0.3) 3px,
        rgba(0, 0, 0, 0.3) 4px
    );
    background-size: 100% 5px; /* Adjust scanline density */
}
.item-texture-scanlines .item-segment,
.item-type-datachip.item-shape-composite-geometric {
    background-image: repeating-linear-gradient(
        0deg,
        transparent,
        transparent 1px,
        rgba(0, 0, 0, 0.25) 2px,
        rgba(0, 0, 0, 0.25) 2.5px
    );
    background-size: 100% 4px;
}

.item-texture-pulsing .item-core {
    width: 35%;
    height: 35%;
    background-color: rgba(255, 255, 255, 0.7);
    border-radius: 50%;
    animation: pulse-core 1.3s infinite alternate;
    box-shadow: 0 0 10px white, 0 0 5px white inset;
}
.item-type-biomod .item-core { background-color: #ff6347; box-shadow: 0 0 10px #ff6347, 0 0 5px #ff8a50 inset; }

.item-texture-metallic-sheen { /* For hardware */
    background-image: linear-gradient( -75deg, transparent 30%, rgba(255, 255, 255, 0.15) 45%, rgba(255, 255, 255, 0.15) 55%, transparent 70% );
    background-size: 250% 100%; /* Wider size for smoother animation */
    animation: metallic-sheen-anim 3s linear infinite;
}
@keyframes metallic-sheen-anim {
    from { background-position: 200% 0; }
    to { background-position: -200% 0; }
}

.item-texture-metallic-grid { /* Alternative for hardware */
    background-color: #888; /* Base */
    background-image:
        linear-gradient(rgba(255,255,255,.1) 1px, transparent 1px),
        linear-gradient(90deg, rgba(255,255,255,.1) 1px, transparent 1px);
    background-size: 10px 10px;
    border: 1px solid #555;
}

.item-texture-rust-patches { /* For scrap */
    position: relative;
}
.item-texture-rust-patches::after {
    content: '';
    position: absolute;
    inset: 0;
    background-image:
        radial-gradient(circle at 20% 30%, rgba(100, 70, 50, 0.5) 10%, transparent 30%),
        radial-gradient(circle at 75% 60%, rgba(90, 60, 40, 0.4) 15%, transparent 40%),
        radial-gradient(circle at 50% 90%, rgba(110, 80, 60, 0.3) 5%, transparent 20%);
    opacity: 0.7;
    border-radius: inherit; /* Follow item shape */
    pointer-events: none;
}

.item-texture-static-flicker, .item-texture-heavy-static-glitch {
    position: relative;
    overflow: hidden; /* Keep noise contained */
}
.item-texture-static-flicker::before, .item-texture-heavy-static-glitch::before {
    content: "";
    position: absolute;
    top: -5%; left: -5%; width: 110%; height: 110%;
    pointer-events: none;
    z-index: 0; /* Behind main content */
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.8' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%' height='100%' filter='url(%23noiseFilter)' opacity='0.06'/%3E%3C/svg%3E");
    animation: noise-anim 0.15s infinite steps(2);
}
.item-texture-heavy-static-glitch::before {
     opacity: 0.1; /* More visible noise */
}
@keyframes noise-anim {
  0% { transform: translate(0,0); } 100% { transform: translate(2px,1px); }
}

/* --- ANIMATION CLASSES --- */
.item-animation-fast-pulse-red { /* For volatile */
    animation: fast-pulse-red-anim 0.5s infinite alternate;
}
@keyframes fast-pulse-red-anim {
    from { box-shadow: 0 0 8px red, 0 0 12px red; }
    to   { box-shadow: 0 0 18px darkred, 0 0 25px darkred; transform: scale(1.03); }
}

.item-animation-glitch-flicker-strong { /* For specific corrupted items */
    animation: text-flicker-anim-strong 0.15s infinite steps(1, end); /* Reuse from effects.css */
}

.item-type-corrupted-data.item-shape-rect-stacked .item-segment {
    animation: glitch-flicker 0.1s infinite alternate;
}

@keyframes glitch-flicker {
    0% { opacity: 1; transform: translateX(0); }
    25% { opacity: 0.7; transform: translateX(-1px); }
    50% { opacity: 1; transform: translateX(1px); }
    75% { opacity: 0.8; transform: skewX(5deg); }
    100% { opacity: 1; transform: translateX(0); }
}

/* --- BORDER STYLE CLASSES --- */
.item-border-thin-dashed-warning { /* For fragile */
    border: 1.5px dashed #FFD700 !important; /* Override default border */
    box-shadow: inset 0 0 6px #FFD700, 0 0 6px #FFD700; /* Inner and outer glow */
}

.game-item.is-fragile {
    animation: fragile-pulse 0.5s infinite alternate;
    outline: 2px dashed rgba(255, 165, 0, 0.8);
}
@keyframes fragile-pulse {
    0% { box-shadow: 0 0 3px rgba(255, 165, 0, 0.5); }
    100% { box-shadow: 0 0 8px rgba(255, 165, 0, 0.9); }
}

.game-item.is-volatile {
    animation: volatile-glow 0.7s infinite alternate;
    outline: 2px solid rgba(255, 0, 0, 0.7);
}
@keyframes volatile-glow {
    from { box-shadow: 0 0 5px rgba(255,0,0,0.6), inset 0 0 3px rgba(255,100,100,0.4); }
    to   { box-shadow: 0 0 15px rgba(255,0,0,0.9), inset 0 0 8px rgba(255,100,100,0.7); }
}

/* Keyframe for pulsing core if not already defined */
@keyframes pulse-core {
    from { transform: scale(0.8); opacity: 0.7; }
    to { transform: scale(1); opacity: 1; }
}

/* --- TOOLTIP STYLES --- */
#item-tooltip {
    position: absolute;
    background-color: rgba(20, 18, 32, 0.9);
    color: var(--neon-yellow);
    border: 1px solid var(--neon-cyan);
    border-radius: 4px;
    padding: 8px 12px;
    font-family: var(--font-secondary);
    font-size: 0.85rem;
    z-index: 1000;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.15s ease-out;
    box-shadow: 0 2px 10px rgba(0,0,0,0.5);
    max-width: 250px;
    white-space: pre-wrap;
}
#item-tooltip.visible {
    opacity: 1;
}
#item-tooltip strong {
    color: var(--neon-green);
    display: block;
    margin-bottom: 4px;
}
#item-tooltip .property {
    color: var(--neon-cyan);
}